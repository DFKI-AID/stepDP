/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace DFKI.AssemblyRobot
{
  public partial class AssemblyRobotView {
    /// <summary>
    /// Thrift for interacting with the hololens
    /// 
    /// </summary>
    public interface ISync {
      void updateGrammar(UpdateGrammar updateGrammar);
    }

    /// <summary>
    /// Thrift for interacting with the hololens
    /// 
    /// </summary>
    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_updateGrammar(AsyncCallback callback, object state, UpdateGrammar updateGrammar);
      void End_updateGrammar(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// Thrift for interacting with the hololens
    /// 
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_updateGrammar(AsyncCallback callback, object state, UpdateGrammar updateGrammar)
      {
        return send_updateGrammar(callback, state, updateGrammar);
      }

      public void End_updateGrammar(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateGrammar();
      }

      #endif

      public void updateGrammar(UpdateGrammar updateGrammar)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_updateGrammar(null, null, updateGrammar);
        End_updateGrammar(asyncResult);

        #else
        send_updateGrammar(updateGrammar);
        recv_updateGrammar();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateGrammar(AsyncCallback callback, object state, UpdateGrammar updateGrammar)
      {
        oprot_.WriteMessageBegin(new TMessage("updateGrammar", TMessageType.Call, seqid_));
        updateGrammar_args args = new updateGrammar_args();
        args.UpdateGrammar = updateGrammar;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_updateGrammar(UpdateGrammar updateGrammar)
      {
        oprot_.WriteMessageBegin(new TMessage("updateGrammar", TMessageType.Call, seqid_));
        updateGrammar_args args = new updateGrammar_args();
        args.UpdateGrammar = updateGrammar;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_updateGrammar()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateGrammar_result result = new updateGrammar_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["updateGrammar"] = updateGrammar_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void updateGrammar_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateGrammar_args args = new updateGrammar_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateGrammar_result result = new updateGrammar_result();
        try
        {
          iface_.updateGrammar(args.UpdateGrammar);
          oprot.WriteMessageBegin(new TMessage("updateGrammar", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateGrammar", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGrammar_args : TBase
    {

      public UpdateGrammar UpdateGrammar { get; set; }

      public updateGrammar_args() {
      }

      public updateGrammar_args(UpdateGrammar updateGrammar) : this() {
        this.UpdateGrammar = updateGrammar;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          bool isset_updateGrammar = false;
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  UpdateGrammar = new UpdateGrammar();
                  UpdateGrammar.Read(iprot);
                  isset_updateGrammar = true;
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
          if (!isset_updateGrammar)
            throw new TProtocolException(TProtocolException.INVALID_DATA, "required field UpdateGrammar not set");
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateGrammar_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UpdateGrammar == null)
            throw new TProtocolException(TProtocolException.INVALID_DATA, "required field UpdateGrammar not set");
          field.Name = "updateGrammar";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UpdateGrammar.Write(oprot);
          oprot.WriteFieldEnd();
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateGrammar_args(");
        __sb.Append(", UpdateGrammar: ");
        __sb.Append(UpdateGrammar== null ? "<null>" : UpdateGrammar.ToString());
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGrammar_result : TBase
    {

      public updateGrammar_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateGrammar_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateGrammar_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
